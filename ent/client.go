// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"github.com/Shikugawa/potluq/ent/migrate"

	"github.com/Shikugawa/potluq/ent/club"
	"github.com/Shikugawa/potluq/ent/music"
	"github.com/Shikugawa/potluq/ent/user"

	"github.com/facebookincubator/ent/dialect"
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Club is the client for interacting with the Club builders.
	Club *ClubClient
	// Music is the client for interacting with the Music builders.
	Music *MusicClient
	// User is the client for interacting with the User builders.
	User *UserClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	c := config{log: log.Println}
	c.options(opts...)
	return &Client{
		config: c,
		Schema: migrate.NewSchema(c.driver),
		Club:   NewClubClient(c),
		Music:  NewMusicClient(c),
		User:   NewUserClient(c),
	}
}

// Open opens a connection to the database specified by the driver name and a
// driver-specific data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %v", err)
	}
	cfg := config{driver: tx, log: c.log, debug: c.debug}
	return &Tx{
		config: cfg,
		Club:   NewClubClient(cfg),
		Music:  NewMusicClient(cfg),
		User:   NewUserClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Club.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := config{driver: dialect.Debug(c.driver, c.log), log: c.log, debug: true}
	return &Client{
		config: cfg,
		Schema: migrate.NewSchema(cfg.driver),
		Club:   NewClubClient(cfg),
		Music:  NewMusicClient(cfg),
		User:   NewUserClient(cfg),
	}
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// ClubClient is a client for the Club schema.
type ClubClient struct {
	config
}

// NewClubClient returns a client for the Club from the given config.
func NewClubClient(c config) *ClubClient {
	return &ClubClient{config: c}
}

// Create returns a create builder for Club.
func (c *ClubClient) Create() *ClubCreate {
	return &ClubCreate{config: c.config}
}

// Update returns an update builder for Club.
func (c *ClubClient) Update() *ClubUpdate {
	return &ClubUpdate{config: c.config}
}

// UpdateOne returns an update builder for the given entity.
func (c *ClubClient) UpdateOne(cl *Club) *ClubUpdateOne {
	return c.UpdateOneID(cl.ID)
}

// UpdateOneID returns an update builder for the given id.
func (c *ClubClient) UpdateOneID(id int) *ClubUpdateOne {
	return &ClubUpdateOne{config: c.config, id: id}
}

// Delete returns a delete builder for Club.
func (c *ClubClient) Delete() *ClubDelete {
	return &ClubDelete{config: c.config}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ClubClient) DeleteOne(cl *Club) *ClubDeleteOne {
	return c.DeleteOneID(cl.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ClubClient) DeleteOneID(id int) *ClubDeleteOne {
	return &ClubDeleteOne{c.Delete().Where(club.ID(id))}
}

// Create returns a query builder for Club.
func (c *ClubClient) Query() *ClubQuery {
	return &ClubQuery{config: c.config}
}

// Get returns a Club entity by its id.
func (c *ClubClient) Get(ctx context.Context, id int) (*Club, error) {
	return c.Query().Where(club.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ClubClient) GetX(ctx context.Context, id int) *Club {
	cl, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return cl
}

// QueryMusic queries the music edge of a Club.
func (c *ClubClient) QueryMusic(cl *Club) *MusicQuery {
	query := &MusicQuery{config: c.config}
	id := cl.ID
	step := sqlgraph.NewStep(
		sqlgraph.From(club.Table, club.FieldID, id),
		sqlgraph.To(music.Table, music.FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, club.MusicTable, club.MusicColumn),
	)
	query.sql = sqlgraph.Neighbors(cl.driver.Dialect(), step)

	return query
}

// QueryUser queries the user edge of a Club.
func (c *ClubClient) QueryUser(cl *Club) *UserQuery {
	query := &UserQuery{config: c.config}
	id := cl.ID
	step := sqlgraph.NewStep(
		sqlgraph.From(club.Table, club.FieldID, id),
		sqlgraph.To(user.Table, user.FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, club.UserTable, club.UserPrimaryKey...),
	)
	query.sql = sqlgraph.Neighbors(cl.driver.Dialect(), step)

	return query
}

// MusicClient is a client for the Music schema.
type MusicClient struct {
	config
}

// NewMusicClient returns a client for the Music from the given config.
func NewMusicClient(c config) *MusicClient {
	return &MusicClient{config: c}
}

// Create returns a create builder for Music.
func (c *MusicClient) Create() *MusicCreate {
	return &MusicCreate{config: c.config}
}

// Update returns an update builder for Music.
func (c *MusicClient) Update() *MusicUpdate {
	return &MusicUpdate{config: c.config}
}

// UpdateOne returns an update builder for the given entity.
func (c *MusicClient) UpdateOne(m *Music) *MusicUpdateOne {
	return c.UpdateOneID(m.ID)
}

// UpdateOneID returns an update builder for the given id.
func (c *MusicClient) UpdateOneID(id int) *MusicUpdateOne {
	return &MusicUpdateOne{config: c.config, id: id}
}

// Delete returns a delete builder for Music.
func (c *MusicClient) Delete() *MusicDelete {
	return &MusicDelete{config: c.config}
}

// DeleteOne returns a delete builder for the given entity.
func (c *MusicClient) DeleteOne(m *Music) *MusicDeleteOne {
	return c.DeleteOneID(m.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *MusicClient) DeleteOneID(id int) *MusicDeleteOne {
	return &MusicDeleteOne{c.Delete().Where(music.ID(id))}
}

// Create returns a query builder for Music.
func (c *MusicClient) Query() *MusicQuery {
	return &MusicQuery{config: c.config}
}

// Get returns a Music entity by its id.
func (c *MusicClient) Get(ctx context.Context, id int) (*Music, error) {
	return c.Query().Where(music.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *MusicClient) GetX(ctx context.Context, id int) *Music {
	m, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return m
}

// QueryClub queries the club edge of a Music.
func (c *MusicClient) QueryClub(m *Music) *ClubQuery {
	query := &ClubQuery{config: c.config}
	id := m.ID
	step := sqlgraph.NewStep(
		sqlgraph.From(music.Table, music.FieldID, id),
		sqlgraph.To(club.Table, club.FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, music.ClubTable, music.ClubColumn),
	)
	query.sql = sqlgraph.Neighbors(m.driver.Dialect(), step)

	return query
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Create returns a create builder for User.
func (c *UserClient) Create() *UserCreate {
	return &UserCreate{config: c.config}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	return &UserUpdate{config: c.config}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	return c.UpdateOneID(u.ID)
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id int) *UserUpdateOne {
	return &UserUpdateOne{config: c.config, id: id}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	return &UserDelete{config: c.config}
}

// DeleteOne returns a delete builder for the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *UserClient) DeleteOneID(id int) *UserDeleteOne {
	return &UserDeleteOne{c.Delete().Where(user.ID(id))}
}

// Create returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{config: c.config}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id int) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id int) *User {
	u, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return u
}

// QueryClub queries the club edge of a User.
func (c *UserClient) QueryClub(u *User) *ClubQuery {
	query := &ClubQuery{config: c.config}
	id := u.ID
	step := sqlgraph.NewStep(
		sqlgraph.From(user.Table, user.FieldID, id),
		sqlgraph.To(club.Table, club.FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, user.ClubTable, user.ClubPrimaryKey...),
	)
	query.sql = sqlgraph.Neighbors(u.driver.Dialect(), step)

	return query
}
