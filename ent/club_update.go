// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"

	"github.com/Shikugawa/potluq/ent/club"
	"github.com/Shikugawa/potluq/ent/device"
	"github.com/Shikugawa/potluq/ent/music"
	"github.com/Shikugawa/potluq/ent/predicate"
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// ClubUpdate is the builder for updating Club entities.
type ClubUpdate struct {
	config
	name          *string
	music         map[int]struct{}
	device        map[int]struct{}
	removedMusic  map[int]struct{}
	removedDevice map[int]struct{}
	predicates    []predicate.Club
}

// Where adds a new predicate for the builder.
func (cu *ClubUpdate) Where(ps ...predicate.Club) *ClubUpdate {
	cu.predicates = append(cu.predicates, ps...)
	return cu
}

// SetName sets the name field.
func (cu *ClubUpdate) SetName(s string) *ClubUpdate {
	cu.name = &s
	return cu
}

// AddMusicIDs adds the music edge to Music by ids.
func (cu *ClubUpdate) AddMusicIDs(ids ...int) *ClubUpdate {
	if cu.music == nil {
		cu.music = make(map[int]struct{})
	}
	for i := range ids {
		cu.music[ids[i]] = struct{}{}
	}
	return cu
}

// AddMusic adds the music edges to Music.
func (cu *ClubUpdate) AddMusic(m ...*Music) *ClubUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return cu.AddMusicIDs(ids...)
}

// AddDeviceIDs adds the device edge to Device by ids.
func (cu *ClubUpdate) AddDeviceIDs(ids ...int) *ClubUpdate {
	if cu.device == nil {
		cu.device = make(map[int]struct{})
	}
	for i := range ids {
		cu.device[ids[i]] = struct{}{}
	}
	return cu
}

// AddDevice adds the device edges to Device.
func (cu *ClubUpdate) AddDevice(d ...*Device) *ClubUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return cu.AddDeviceIDs(ids...)
}

// RemoveMusicIDs removes the music edge to Music by ids.
func (cu *ClubUpdate) RemoveMusicIDs(ids ...int) *ClubUpdate {
	if cu.removedMusic == nil {
		cu.removedMusic = make(map[int]struct{})
	}
	for i := range ids {
		cu.removedMusic[ids[i]] = struct{}{}
	}
	return cu
}

// RemoveMusic removes music edges to Music.
func (cu *ClubUpdate) RemoveMusic(m ...*Music) *ClubUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return cu.RemoveMusicIDs(ids...)
}

// RemoveDeviceIDs removes the device edge to Device by ids.
func (cu *ClubUpdate) RemoveDeviceIDs(ids ...int) *ClubUpdate {
	if cu.removedDevice == nil {
		cu.removedDevice = make(map[int]struct{})
	}
	for i := range ids {
		cu.removedDevice[ids[i]] = struct{}{}
	}
	return cu
}

// RemoveDevice removes device edges to Device.
func (cu *ClubUpdate) RemoveDevice(d ...*Device) *ClubUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return cu.RemoveDeviceIDs(ids...)
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (cu *ClubUpdate) Save(ctx context.Context) (int, error) {
	return cu.sqlSave(ctx)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *ClubUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *ClubUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *ClubUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cu *ClubUpdate) sqlSave(ctx context.Context) (n int, err error) {
	spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   club.Table,
			Columns: club.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: club.FieldID,
			},
		},
	}
	if ps := cu.predicates; len(ps) > 0 {
		spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value := cu.name; value != nil {
		spec.Fields.Set = append(spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: club.FieldName,
		})
	}
	if nodes := cu.removedMusic; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   club.MusicTable,
			Columns: []string{club.MusicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: music.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		spec.Edges.Clear = append(spec.Edges.Clear, edge)
	}
	if nodes := cu.music; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   club.MusicTable,
			Columns: []string{club.MusicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: music.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		spec.Edges.Add = append(spec.Edges.Add, edge)
	}
	if nodes := cu.removedDevice; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   club.DeviceTable,
			Columns: []string{club.DeviceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: device.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		spec.Edges.Clear = append(spec.Edges.Clear, edge)
	}
	if nodes := cu.device; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   club.DeviceTable,
			Columns: []string{club.DeviceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: device.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		spec.Edges.Add = append(spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// ClubUpdateOne is the builder for updating a single Club entity.
type ClubUpdateOne struct {
	config
	id            int
	name          *string
	music         map[int]struct{}
	device        map[int]struct{}
	removedMusic  map[int]struct{}
	removedDevice map[int]struct{}
}

// SetName sets the name field.
func (cuo *ClubUpdateOne) SetName(s string) *ClubUpdateOne {
	cuo.name = &s
	return cuo
}

// AddMusicIDs adds the music edge to Music by ids.
func (cuo *ClubUpdateOne) AddMusicIDs(ids ...int) *ClubUpdateOne {
	if cuo.music == nil {
		cuo.music = make(map[int]struct{})
	}
	for i := range ids {
		cuo.music[ids[i]] = struct{}{}
	}
	return cuo
}

// AddMusic adds the music edges to Music.
func (cuo *ClubUpdateOne) AddMusic(m ...*Music) *ClubUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return cuo.AddMusicIDs(ids...)
}

// AddDeviceIDs adds the device edge to Device by ids.
func (cuo *ClubUpdateOne) AddDeviceIDs(ids ...int) *ClubUpdateOne {
	if cuo.device == nil {
		cuo.device = make(map[int]struct{})
	}
	for i := range ids {
		cuo.device[ids[i]] = struct{}{}
	}
	return cuo
}

// AddDevice adds the device edges to Device.
func (cuo *ClubUpdateOne) AddDevice(d ...*Device) *ClubUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return cuo.AddDeviceIDs(ids...)
}

// RemoveMusicIDs removes the music edge to Music by ids.
func (cuo *ClubUpdateOne) RemoveMusicIDs(ids ...int) *ClubUpdateOne {
	if cuo.removedMusic == nil {
		cuo.removedMusic = make(map[int]struct{})
	}
	for i := range ids {
		cuo.removedMusic[ids[i]] = struct{}{}
	}
	return cuo
}

// RemoveMusic removes music edges to Music.
func (cuo *ClubUpdateOne) RemoveMusic(m ...*Music) *ClubUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return cuo.RemoveMusicIDs(ids...)
}

// RemoveDeviceIDs removes the device edge to Device by ids.
func (cuo *ClubUpdateOne) RemoveDeviceIDs(ids ...int) *ClubUpdateOne {
	if cuo.removedDevice == nil {
		cuo.removedDevice = make(map[int]struct{})
	}
	for i := range ids {
		cuo.removedDevice[ids[i]] = struct{}{}
	}
	return cuo
}

// RemoveDevice removes device edges to Device.
func (cuo *ClubUpdateOne) RemoveDevice(d ...*Device) *ClubUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return cuo.RemoveDeviceIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (cuo *ClubUpdateOne) Save(ctx context.Context) (*Club, error) {
	return cuo.sqlSave(ctx)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *ClubUpdateOne) SaveX(ctx context.Context) *Club {
	c, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return c
}

// Exec executes the query on the entity.
func (cuo *ClubUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *ClubUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cuo *ClubUpdateOne) sqlSave(ctx context.Context) (c *Club, err error) {
	spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   club.Table,
			Columns: club.Columns,
			ID: &sqlgraph.FieldSpec{
				Value:  cuo.id,
				Type:   field.TypeInt,
				Column: club.FieldID,
			},
		},
	}
	if value := cuo.name; value != nil {
		spec.Fields.Set = append(spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: club.FieldName,
		})
	}
	if nodes := cuo.removedMusic; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   club.MusicTable,
			Columns: []string{club.MusicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: music.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		spec.Edges.Clear = append(spec.Edges.Clear, edge)
	}
	if nodes := cuo.music; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   club.MusicTable,
			Columns: []string{club.MusicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: music.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		spec.Edges.Add = append(spec.Edges.Add, edge)
	}
	if nodes := cuo.removedDevice; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   club.DeviceTable,
			Columns: []string{club.DeviceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: device.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		spec.Edges.Clear = append(spec.Edges.Clear, edge)
	}
	if nodes := cuo.device; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   club.DeviceTable,
			Columns: []string{club.DeviceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: device.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		spec.Edges.Add = append(spec.Edges.Add, edge)
	}
	c = &Club{config: cuo.config}
	spec.Assign = c.assignValues
	spec.ScanValues = c.scanValues()
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return c, nil
}
