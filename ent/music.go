// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/Shikugawa/potluq/ent/music"
	"github.com/facebookincubator/ent/dialect/sql"
)

// Music is the model entity for the Music schema.
type Music struct {
	config
	// ID of the ent.
	ID int `json:"id,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Music) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Music fields.
func (m *Music) assignValues(values ...interface{}) error {
	if m, n := len(values), len(music.Columns); m != n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	m.ID = int(value.Int64)
	values = values[1:]
	return nil
}

// QueryClub queries the club edge of the Music.
func (m *Music) QueryClub() *ClubQuery {
	return (&MusicClient{m.config}).QueryClub(m)
}

// Update returns a builder for updating this Music.
// Note that, you need to call Music.Unwrap() before calling this method, if this Music
// was returned from a transaction, and the transaction was committed or rolled back.
func (m *Music) Update() *MusicUpdateOne {
	return (&MusicClient{m.config}).UpdateOne(m)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (m *Music) Unwrap() *Music {
	tx, ok := m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Music is not a transactional entity")
	}
	m.config.driver = tx.drv
	return m
}

// String implements the fmt.Stringer.
func (m *Music) String() string {
	var builder strings.Builder
	builder.WriteString("Music(")
	builder.WriteString(fmt.Sprintf("id=%v", m.ID))
	builder.WriteByte(')')
	return builder.String()
}

// Musics is a parsable slice of Music.
type Musics []*Music

func (m Musics) config(cfg config) {
	for _i := range m {
		m[_i].config = cfg
	}
}
