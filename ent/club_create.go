// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"

	"github.com/Shikugawa/potluq/ent/club"
	"github.com/Shikugawa/potluq/ent/music"
	"github.com/Shikugawa/potluq/ent/user"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// ClubCreate is the builder for creating a Club entity.
type ClubCreate struct {
	config
	name  *string
	music map[int]struct{}
	user  map[int]struct{}
}

// SetName sets the name field.
func (cc *ClubCreate) SetName(s string) *ClubCreate {
	cc.name = &s
	return cc
}

// AddMusicIDs adds the music edge to Music by ids.
func (cc *ClubCreate) AddMusicIDs(ids ...int) *ClubCreate {
	if cc.music == nil {
		cc.music = make(map[int]struct{})
	}
	for i := range ids {
		cc.music[ids[i]] = struct{}{}
	}
	return cc
}

// AddMusic adds the music edges to Music.
func (cc *ClubCreate) AddMusic(m ...*Music) *ClubCreate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return cc.AddMusicIDs(ids...)
}

// AddUserIDs adds the user edge to User by ids.
func (cc *ClubCreate) AddUserIDs(ids ...int) *ClubCreate {
	if cc.user == nil {
		cc.user = make(map[int]struct{})
	}
	for i := range ids {
		cc.user[ids[i]] = struct{}{}
	}
	return cc
}

// AddUser adds the user edges to User.
func (cc *ClubCreate) AddUser(u ...*User) *ClubCreate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return cc.AddUserIDs(ids...)
}

// Save creates the Club in the database.
func (cc *ClubCreate) Save(ctx context.Context) (*Club, error) {
	if cc.name == nil {
		return nil, errors.New("ent: missing required field \"name\"")
	}
	return cc.sqlSave(ctx)
}

// SaveX calls Save and panics if Save returns an error.
func (cc *ClubCreate) SaveX(ctx context.Context) *Club {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (cc *ClubCreate) sqlSave(ctx context.Context) (*Club, error) {
	var (
		c    = &Club{config: cc.config}
		spec = &sqlgraph.CreateSpec{
			Table: club.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: club.FieldID,
			},
		}
	)
	if value := cc.name; value != nil {
		spec.Fields = append(spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: club.FieldName,
		})
		c.Name = *value
	}
	if nodes := cc.music; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   club.MusicTable,
			Columns: []string{club.MusicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: music.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		spec.Edges = append(spec.Edges, edge)
	}
	if nodes := cc.user; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   club.UserTable,
			Columns: club.UserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		spec.Edges = append(spec.Edges, edge)
	}
	if err := sqlgraph.CreateNode(ctx, cc.driver, spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := spec.ID.Value.(int64)
	c.ID = int(id)
	return c, nil
}
