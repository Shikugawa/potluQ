// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"

	"github.com/Shikugawa/potraq/ent/club"
	"github.com/Shikugawa/potraq/ent/music"
	"github.com/Shikugawa/potraq/ent/predicate"
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// MusicUpdate is the builder for updating Music entities.
type MusicUpdate struct {
	config
	club        map[int]struct{}
	clearedClub bool
	predicates  []predicate.Music
}

// Where adds a new predicate for the builder.
func (mu *MusicUpdate) Where(ps ...predicate.Music) *MusicUpdate {
	mu.predicates = append(mu.predicates, ps...)
	return mu
}

// SetClubID sets the club edge to Club by id.
func (mu *MusicUpdate) SetClubID(id int) *MusicUpdate {
	if mu.club == nil {
		mu.club = make(map[int]struct{})
	}
	mu.club[id] = struct{}{}
	return mu
}

// SetNillableClubID sets the club edge to Club by id if the given value is not nil.
func (mu *MusicUpdate) SetNillableClubID(id *int) *MusicUpdate {
	if id != nil {
		mu = mu.SetClubID(*id)
	}
	return mu
}

// SetClub sets the club edge to Club.
func (mu *MusicUpdate) SetClub(c *Club) *MusicUpdate {
	return mu.SetClubID(c.ID)
}

// ClearClub clears the club edge to Club.
func (mu *MusicUpdate) ClearClub() *MusicUpdate {
	mu.clearedClub = true
	return mu
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (mu *MusicUpdate) Save(ctx context.Context) (int, error) {
	if len(mu.club) > 1 {
		return 0, errors.New("ent: multiple assignments on a unique edge \"club\"")
	}
	return mu.sqlSave(ctx)
}

// SaveX is like Save, but panics if an error occurs.
func (mu *MusicUpdate) SaveX(ctx context.Context) int {
	affected, err := mu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mu *MusicUpdate) Exec(ctx context.Context) error {
	_, err := mu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mu *MusicUpdate) ExecX(ctx context.Context) {
	if err := mu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (mu *MusicUpdate) sqlSave(ctx context.Context) (n int, err error) {
	spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   music.Table,
			Columns: music.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: music.FieldID,
			},
		},
	}
	if ps := mu.predicates; len(ps) > 0 {
		spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if mu.clearedClub {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   music.ClubTable,
			Columns: []string{music.ClubColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: club.FieldID,
				},
			},
		}
		spec.Edges.Clear = append(spec.Edges.Clear, edge)
	}
	if nodes := mu.club; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   music.ClubTable,
			Columns: []string{music.ClubColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: club.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		spec.Edges.Add = append(spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mu.driver, spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// MusicUpdateOne is the builder for updating a single Music entity.
type MusicUpdateOne struct {
	config
	id          int
	club        map[int]struct{}
	clearedClub bool
}

// SetClubID sets the club edge to Club by id.
func (muo *MusicUpdateOne) SetClubID(id int) *MusicUpdateOne {
	if muo.club == nil {
		muo.club = make(map[int]struct{})
	}
	muo.club[id] = struct{}{}
	return muo
}

// SetNillableClubID sets the club edge to Club by id if the given value is not nil.
func (muo *MusicUpdateOne) SetNillableClubID(id *int) *MusicUpdateOne {
	if id != nil {
		muo = muo.SetClubID(*id)
	}
	return muo
}

// SetClub sets the club edge to Club.
func (muo *MusicUpdateOne) SetClub(c *Club) *MusicUpdateOne {
	return muo.SetClubID(c.ID)
}

// ClearClub clears the club edge to Club.
func (muo *MusicUpdateOne) ClearClub() *MusicUpdateOne {
	muo.clearedClub = true
	return muo
}

// Save executes the query and returns the updated entity.
func (muo *MusicUpdateOne) Save(ctx context.Context) (*Music, error) {
	if len(muo.club) > 1 {
		return nil, errors.New("ent: multiple assignments on a unique edge \"club\"")
	}
	return muo.sqlSave(ctx)
}

// SaveX is like Save, but panics if an error occurs.
func (muo *MusicUpdateOne) SaveX(ctx context.Context) *Music {
	m, err := muo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return m
}

// Exec executes the query on the entity.
func (muo *MusicUpdateOne) Exec(ctx context.Context) error {
	_, err := muo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (muo *MusicUpdateOne) ExecX(ctx context.Context) {
	if err := muo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (muo *MusicUpdateOne) sqlSave(ctx context.Context) (m *Music, err error) {
	spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   music.Table,
			Columns: music.Columns,
			ID: &sqlgraph.FieldSpec{
				Value:  muo.id,
				Type:   field.TypeInt,
				Column: music.FieldID,
			},
		},
	}
	if muo.clearedClub {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   music.ClubTable,
			Columns: []string{music.ClubColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: club.FieldID,
				},
			},
		}
		spec.Edges.Clear = append(spec.Edges.Clear, edge)
	}
	if nodes := muo.club; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   music.ClubTable,
			Columns: []string{music.ClubColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: club.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		spec.Edges.Add = append(spec.Edges.Add, edge)
	}
	m = &Music{config: muo.config}
	spec.Assign = m.assignValues
	spec.ScanValues = m.scanValues()
	if err = sqlgraph.UpdateNode(ctx, muo.driver, spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return m, nil
}
