// Code generated by entc, DO NOT EDIT.

package device

import (
	"fmt"
)

const (
	// Label holds the string label denoting the device type in the database.
	Label = "device"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldRole holds the string denoting the role vertex property in the database.
	FieldRole = "role"

	// Table holds the table name of the device in the database.
	Table = "devices"
	// ClubTable is the table the holds the club relation/edge.
	ClubTable = "devices"
	// ClubInverseTable is the table name for the Club entity.
	// It exists in this package in order to avoid circular dependency with the "club" package.
	ClubInverseTable = "clubs"
	// ClubColumn is the table column denoting the club relation/edge.
	ClubColumn = "club_id"
	// UserTable is the table the holds the user relation/edge. The primary key declared below.
	UserTable = "device_user"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
)

// Columns holds all SQL columns are device fields.
var Columns = []string{
	FieldID,
	FieldRole,
}

var (
	// UserPrimaryKey and UserColumn2 are the table columns denoting the
	// primary key for the user relation (M2M).
	UserPrimaryKey = []string{"device_id", "user_id"}
)

// Role defines the type for the role enum field.
type Role string

const (
	RoleJukebox   Role = "jukebox"
	RoleRequester Role = "requester"
)

func (s Role) String() string {
	return string(s)
}

// RoleValidator is a validator for the "role" field enum values. It is called by the builders before save.
func RoleValidator(role Role) error {
	switch role {
	case RoleJukebox, RoleRequester:
		return nil
	default:
		return fmt.Errorf("device: invalid enum value for role field: %q", role)
	}
}
